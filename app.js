import { CronJob } from 'cron';
import { app, errorHandler } from 'mu';
import { createJobFromScheduledJob } from "./lib/job";
import { getRepeatFrequency, getScheduledJobData, getScheduledJobs } from './lib/scheduled-job';
import { waitForDatabase } from './utils/database-utils';

const CRON_MANAGE_SCHEDULED_JOBS = process.env.CRON_MANAGE_SCHEDULED_JOBS || '*/5 * * * *';
const CRON_JOBS = {};

waitForDatabase(manageScheduledJobs);

async function manageScheduledJobs(){
  new CronJob(CRON_MANAGE_SCHEDULED_JOBS, async function() {
    console.log(`Managing ScheduledJobs`);
    try {
      const scheduledJobs = await getScheduledJobs();
      const fetchedJobUris = scheduledJobs.map(job => job.uri);

      console.log(`Checking for obsolete ScheduledJobs to unschedule.`);
      let currentJobUris = Object.keys(CRON_JOBS);
      const obsoleteJobUris = currentJobUris.filter(x => !fetchedJobUris.includes(x));

      for(const obsoleteJobUri of obsoleteJobUris){
        await deleteScheduledJob({ uri: obsoleteJobUri });
      }

      console.log(`Checking for new ScheduledJobs to schedule.`);
      currentJobUris = Object.keys(CRON_JOBS);
      const newJobUris = fetchedJobUris.filter(x => !currentJobUris.includes(x));

      for(const newJobUri of newJobUris){
        await addScheduledJob({ uri: newJobUri });
      }

    }
    catch(e) {
      console.log(`Something unexpected went wrong while managing ScheduledJobs`);
      //TODO: alert someone
    }
  });
}

app.get('/', function (_, res) {
  res.send('Hello from scheduled-job-controller');
});

function deleteScheduledJob(scheduledJob) {
  const cron = CRON_JOBS[scheduledJob.uri];
  if(cron) {
    cron.stop();
    delete CRON_JOBS[scheduledJob.uri];
  }
  else {
    console.warn(`No active job found for ${scheduledJob.uri}, ignoringc`);
  }
}

async function addScheduledJob(scheduledJob) {
  const repeatFrequency = await getRepeatFrequency(scheduledJob);
  scheduledJob.repeatFrequency = repeatFrequency;
  CRON_JOBS[scheduledJob.uri] = new CronJob(scheduledJob.repeatFrequency, async function() {

    try {
      console.log(`Executing scheduled job: creating new job generated by scheduled-job: ${scheduledJob.uri}`);
      const scheduledJobData = await getScheduledJobData(scheduledJob);
      await createJobFromScheduledJob(scheduledJobData);
    }

    catch(e) {
      console.log(`Something unexpected went wrong while executing scheduled-job: ${scheduledJob.uri}`);
      //TODO: alert someone
    }

  }, null, true);
}

app.use(errorHandler);
